<p>우클릭 방지, 스크린 캡쳐, 이미지-텍스트
웹의 시장 가치가 분명해지고, 지적재산권과 트래픽 수익이 사업자들에게 중요해지는 시점이 오자 일부 플랫폼에서는 웹 콘텐츠의 복사 및 재전재를 기술적으로 금지하기 위한 조치를 도입했다. 그 중 한 가지 접근 방식은 웹브라우저의 복사 기능을 차단하는 것이다. 마우스 오른쪽 버튼 클릭/드래그/더블클릭을 통한 선택을 막거나, Ctrl 등 특수키를 입력할 경우 팝업창을 띄우는 행위 등이 그 예다. HTML이나 자바스크립트로 키 입력이나 마우스가 발생시키는 이벤트를 가로챈 뒤 <span class="code">false</span>를 <span class="code">return</span>하는 것이 일반적이다. </p>

<p>단순한 예:</p>

<pre><code>&lt;body oncontextmenu='return false' onselectstart='return false' ondragstart='return false'&gt;</code></pre>

<p>복잡한 예 (브런치):
HTML 소스</p>

<pre><code>&lt;!DOCTYPE html&gt; 
&lt;html lang="ko" xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;!-- 중략 --&gt;
  &lt;body&gt;
    &lt;!-- 중략 --&gt;
    &lt;script type="text/javascript" src="//t1.daumcdn.net/brunch/static/real/201608111457/js/B.Article.js"&gt;&lt;/script&gt;
    &lt;!-- 중략 --&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>

<p><a href="https://t1.daumcdn.net/brunch/static/real/201608111457/js/B.Article.js">B.Article.js</a></p>

<pre><code>/**
 * Created by DAUMKAKAO on 15. 1. 14..
 */
window.B.Article = {
/* 중략 */
  "messages": {
          deleteArticle: "글을 삭제하시겠습니까?",
          privateArticle: "발행을 취소하시겠습니까?\n발행취소한 글은 작가의 서랍에 보관합니다.",
          verifyEmail: "아직은 글저장만 가능합니다.\n발행하려면 작가 신청을 해주세요.",
          copyAndPaste: "저작권 보호를 위하여 브런치 작가 본인만 글을 복사할 수 있습니다. 너른 양해 부탁드립니다.",
          publishValidate: "글을 발행하시려면 제목과 내용을 입력해 주세요.\n편집 화면으로 이동하시겠습니까?"
  },
/* 중략 */
  "preventSelectionClassName": ".wrap_article.article_view_disable_selection",
  "preventSelectionEvent": "contextmenu",
/* 중략 */
  preventSelection: function(selector) {
    if (selector &amp;&amp; jQuery(selector).length &gt; 0) {
      var $target = jQuery(selector);
    } else {
      var $target = jQuery(this.preventSelectionClassName);
    }

    var _this = this;

    if ($target.length &gt; 0) {
      jQuery(document).on('keydown', function (e) {
        var pressedKey = String.fromCharCode(e.keyCode).toLowerCase();
        if (e.ctrlKey || e.metaKey) {
          if (pressedKey == "c" || pressedKey == "x" || pressedKey == "a") {
            if (!_this.isSelectStartComment()) {
              alert(_this.messages.copyAndPaste);
              e.preventDefault();
              return false;
            }
          }
        }
      });
    }
    jQuery('img', $target).on('dragstart selectstart', function(e) {
      e.preventDefault();
      return false;
    });

    $target.on(this.preventSelectionEvent, function(e) {
      e.preventDefault();
      return false
    });
  },
/* 중략 */
};

B.Article.init();
B.ImageViewer.init()(jQuery(B.Article.preventSelectionClassName).length &gt; 0);</code></pre>

<ul><li>Ctrl이나 메타키(윈도우 키, 맥의 ⌘키 등)와 c(복사), x(자르기), a(전체선택)을 함께 누르면 에러메시지를 띄우고 <span class="code">false</span>를 <span class="code">return</span>한다.</li><li>이미지를 드래그하거나 선택하려 하면 <span class="code">false</span>를 <span class="code">return</span>한다. (의도는 그런 것 같다)</li><li>contextmenu(오른쪽 클릭하면 나오는 메뉴)를 호출하면 <span class="code">false</span>를 <span class="code">return</span>한다.</li></ul>

<p>대형 서비스에서만 이런 기능을 도입한 것은 아니다. “우클릭 방지 태그”를 검색하면 제로보드, xe 등 개인적으로 사용하는 플랫폼에 해당 기능을 적용하기 위한 팁을 다수 찾아볼 수 있다. 이런 움직임에 대응해 '우클릭 금지 해제' 도구도 성행했다. 예를 들어 우클릭 금지 기능을 무효화하는 코드를 브라우저 즐겨찾기 형식으로 저장한 후, 우클릭 금지가 적용된 페이지에서 해당 즐겨찾기를 열어 코드를 실행시키는 것이다. 인터넷 익스플로러 이외의 브라우저가 점점 많이 사용되면서 해제 방식도 애드온 등 다양한 형태를 띠게 됐다.</p>

<p>우클릭 금지 팝업창이 뜨는 순간 드러나는 것은 충돌하는 욕망이다. 콘텐츠의 유통을 통제함으로써 수익을 지키려는 콘텐츠 창작자 내지 유통자의 욕망, 그리고 해당 콘텐츠를 자유롭게 (그리고 무료로) 소비하는 것뿐만 아니라 다른 곳에 마음대로 이용하고자 하는 욕망. 콘텐츠 제공자의 입장에서 생각하면, 법적으로는 자신이 (혹은 자기 클라이언트가) 소유한 콘텐츠이지만, 웹브라우저를 통해 상대방에게 제공하는 순간 상대방은 웹브라우저가 실행 중인 장비에 물리적으로 해당 콘텐츠를 보유하게 된다. 한 번 준 것을 어떻게 다시 뺏을 (또는 마음대로 쓰지 못하게 할) 것인가? 팝업창은 이 고민이 물질적으로 표출된 형상이다. 우클릭 금지 해제 즐겨찾기 코드나 크롬 확장 도구도 마찬가지다.</p>

<p>한편 우클릭 금지라는 제약에 직면한 사람들이 모두 즐겨찾기나 확장 도구를 활용해 금지 기능을 해제한 것은 아니다. 아마도 상당수는 콘텐츠 제공자의 의도대로 복사를 포기하고, 어쩌면 그 대안으로 제공된 공식 기능인 '퍼가기'를 사용했을 것이다. 또 다른 사람들은 제 3의 길을 선택했다. 화면을 통째로 캡쳐하는 것이다. 화면 캡쳐는 운영체제에 기본적으로 들어 있는 기능이고, 어떤 사람들에게는 더 다루기 쉬웠을 것이다. </p>

<p>이러한 행태는 스마트폰의 보급과 함께 급격히 확장되며, 이는 스마트폰의 편리함과 불편함 모두에 기인한다. 불편함부터 얘기하자. 터치 방식으로 작은 화면에서 텍스트를 선택하고 복사하는 행위는 불편하며, 그보다는 (일반적으로 버튼 두 개를 한 번에 누르면 되는) 화면 캡쳐가 웹브라우저, 소셜미디어 스트림, 메신저 등을 기록하는 손쉬운 수단으로 등장했다. (스크린샷 기능을 방해하거나 차단하는 장치도 고안되었고, 흔한 예로는 네이버 웹툰 앱이 있다. 네이버 웹툰 앱은 대신 '겟짤'이라는 캡쳐+크롭 기능을 제공하며, 이렇게 저장된 이미지에는 워터마크가 추가된다.) 이처럼 캡쳐된 이미지는 다시 소셜미디어나 메신저에 업로드되면서 압축을 거치고 열화된다. 누군가 소셜미디어에서 본 캡쳐이미지를 자기 그룹톡에 공유하고 싶을 때면 또 다시 캡쳐 후 업로드-압축의 과정을 거칠 것이다. 이렇게 저장된 이미지는 gif나 jpg로 여기저기 옮겨다니는 여정에서 재캡쳐-재압축 등의 과정을 거치며 더욱 왜곡되고, 열화의 흔적을 체화하게 된다. 한편 폰에 달린 카메라로 대상을 찍는 것이 아주 손쉬운 일이 되면서 또다른 행태가 보편화되었는데, 모니터에 표시된 텍스트를 폰으로 찍어서 공유하는 것이다. 모니터 픽셀의 질감, 모니터 주사율과 스마트폰 카메라 셔터스피드의 차이가 유발하는 왜곡 등 또 새로운 물질성이 등장한다. </p>

<p>캡쳐된 이미지가 인터넷에서 텍스트가 존재하는 한 가지 양식이라면, 캡쳐를 거치지 않고도 이미지로 존재하는 텍스트 또한 존재한다. 편의상 그것을 이미지-텍스트라고 부르기로 하자. 이미지-텍스트는 웹에서 글을 표시하기 위해 HTML에 내용을 포함시키고 스타일링을 하는 대신, 포토샵 등을 사용해 이미지 파일로 완성한 글이다. 대표적인 예로는 네이버 검색창 하단의 메뉴가 있다.</p>

<img src="https://d2mxuefqeaa7sj.cloudfront.net/s_73FE960A3CA384FEB95C7A2DB2C1B41C4CF95DCC61948B371244305F871B76EB_1471361212756_Screen+Shot+2016-08-16+at+11.26.25+AM.png" alt="" />

<p>
예컨대 위 이미지에서 “메일”은 텍스트가 아니고, 아래 메뉴 팔레트 이미지에서 필요한 부분을 잘라 배치한 것이다.
</p>

<img src="http://img.naver.net/static/www/img/sp_mn160718_v2.png" alt="" />

<p>
예전 싸이월드 미니홈피도 이런 식으로 돼있다. 아래 첨부된 HTML 소스는 메뉴 인터페이스(오른쪽)에 해당한다.
</p>

<p>
<img style="width:auto" src="https://d2mxuefqeaa7sj.cloudfront.net/s_73FE960A3CA384FEB95C7A2DB2C1B41C4CF95DCC61948B371244305F871B76EB_1471361423933_Screen+Shot+2016-08-16+at+11.29.02+AM.png" />
</p>

<p>
  <img style="width:auto" src="https://d2mxuefqeaa7sj.cloudfront.net/s_73FE960A3CA384FEB95C7A2DB2C1B41C4CF95DCC61948B371244305F871B76EB_1471361423930_Screen+Shot+2016-08-16+at+11.28.40+AM.png" />
</p>

<pre><code>&lt;ul&gt;
  &lt;li&gt;&lt;a menutype="main"&gt;&lt;img src="/web/20101231222133im_/http://img2.cyworld.com/img/pwin/m01_1.gif" alt="홈" title="홈" offurl="http://img2.cyworld.com/img/pwin/m01_0.gif" onurl="http://img2.cyworld.com/img/pwin/m01_1.gif" orgurl="http://img2.cyworld.com/img/pwin/m01_1.gif" style="cursor: pointer;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a menutype="prof"&gt;&lt;img src="/web/20101231222133im_/http://img2.cyworld.com/img/pwin/m02_0.gif" alt="프로필" title="프로필" offurl="http://img2.cyworld.com/img/pwin/m02_0.gif" onurl="http://img2.cyworld.com/img/pwin/m02_1.gif" orgurl="http://img2.cyworld.com/img/pwin/m02_0.gif" style="cursor: pointer;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a menutype="diar"&gt;&lt;img src="/web/20101231222133im_/http://img2.cyworld.com/img/pwin/m03_0.gif" alt="다이어리" title="다이어리" offurl="http://img2.cyworld.com/img/pwin/m03_0.gif" onurl="http://img2.cyworld.com/img/pwin/m03_1.gif" orgurl="http://img2.cyworld.com/img/pwin/m03_0.gif" style="cursor: pointer;"&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a menutype="phot"&gt;&lt;img src="/web/20101231222133im_/http://img2.cyworld.com/img/pwin/m05_0.gif" alt="사진첩" title="사진첩" offurl="http://img2.cyworld.com/img/pwin/m05_0.gif" onurl="http://img2.cyworld.com/img/pwin/m05_1.gif" orgurl="http://img2.cyworld.com/img/pwin/m05_0.gif" style="cursor: pointer;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</code></pre>

<p>출처: <a href="https://web.archive.org/web/20101231222032/http://minihp.cyworld.com/pims/main/pims_main.asp?tid=26550690" target="_blank" class="url_wordwrap">https://web.archive.org/web/20101231222032/http://minihp.cyworld.com/pims/main/pims_main.asp?tid=26550690</a></p>

<p>굳이 텍스트를 이런 식으로 만드는 행태가 흔해진 데는 여러 기술적 이유가 있다. 2000년대 초반 웹브라우저의 글자 렌더링 방식은 운영체제와 브라우저에 따라 <a href="https://www.smashingmagazine.com/2012/04/a-closer-look-at-font-rendering/" target="_blank">달랐기 때문에</a> 시각적 일관성을 유지하기 어려웠다. 또한 웹 텍스트에 사용되는 운영체제 기본 폰트의 선택지는 굴림과 돋움 정도였고, 안티알리아싱이 적용되지 않는 옵션은 9pt 혹은 12pt로 제한적이었지만 그나마도 볼드체는 깔끔하지 않아서 제목용 서체가 마땅하지 않았다. 그렇다고 신청해서 받아 쓸 수 있는 웹폰트라는 개념도 존재하지 않았고, 한글 폰트는 (로마자보다 글리프가 훨씬 많기 때문에) 개발 측면에서나 네트워크 트래픽 측면에서나 비용이 많이 들었고 흔하지도 않았다. OS의 안티알리아싱 지원과 브라우저의 폰트 렌더링 성능이 개선되고 웹폰트가 등장하기 전까지 웹에서 한글을 디자인하기 위한 조건은 열악했다. 이런 악조건에서 의도한 디자인을 구현하는 손쉬운 방법은 기술적인 해결을 꾀하는 것보다, 가능한 모든 텍스트를 이미지로 미리 렌더링해버리는 것이다. 마침 대학교와 컴퓨터학원 등에서 포토샵에 능숙한 인력이 양산되면서, 텍스트를 하나하나 이미지로 다듬는 단순노동을 수행하는 웹디자이너를 저렴하게 고용하는 것도 충분히 가능해졌다.</p>

<p>이미지-텍스트는 제목이나 <a href="http://www.todayhumor.co.kr/">메뉴 인터페이스</a>에 머무르지 않고 <a href="http://www.nts.go.kr/news/news_04_01.asp?minfoKey=MINF5420080211205117&amp;type=V&amp;mbsinfoKey=MBS20160816145809917">뉴스레터</a>, <a href="http://www.msip.go.kr/msip_pr/webzine/201307/201307_intro.html">웹진</a>, <a href="http://www.ticketmonster.co.kr/deal/354315046">쇼핑몰 상품설명</a>, <a href="http://www1.president.go.kr/president/intro.php">정부기관장</a> <a href="http://mayor.seoul.go.kr/app/wonsoon/story.do">인사말</a>, 그리고 최근에는 카드뉴스 등 수많은 형식으로 발견된다. 결과는 재가공이나 유지보수가 어려운, 재활용 안 되는 플라스틱 같은 웹이다. 접근성을 위해 이미지 내용에 관한 설명을 <span class="code">alt</span> 텍스트나 <span class="code">hidden</span> 속성이 달린 <span class="code">div</span> 등으로 포함시키는 것이 통상의 규범이지만, 일단 누구나 그 작업을 열심히 하지는 않거니와 (예컨대 온라인 쇼핑몰에서 alt 텍스트는 찾아보기 힘들다) 원래 호스팅된 웹사이트 바깥으로 공유되기 시작하면 <span class="code">alt</span> 텍스트 등은 버려지기 쉽다. 원 소스 링크 대신 이미지를 통째로 복사하거나 캡쳐를 거쳐 공유하는 행태가 흔한 한국에서, 이미지-텍스트는 정보의 불안정성에 기여하는 또 하나의 요소일뿐 아니라 이미지를 로딩할 수 있는 장치 및 네트워크 대역을 보유한 비시각장애인을 정상성으로 상정하는 데 기여한다. 이 같은 문제적 속성은 스크린 캡쳐, 스마트폰으로 찍은 사진, 이미지-텍스트를 가로질러 공통적으로 존재하며, 조각난 이미지를 텍스트 설명 없이 소셜미디어로 유통하는 카드뉴스가 보편적 양식으로 자리잡음으로써 재생산된다. </p>